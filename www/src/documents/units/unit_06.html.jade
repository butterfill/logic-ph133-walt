---cson
layout: 'deck_units'
images: 'unit_06'
title: "Identity"
description: """
  Introduces the notion of identity used in studying first-order logic.  
  Includes example argument and the two principles.
  Also demonstrates how to assign names in zoxiy, and
  using zoxiy to make identity statements true and false.
  """
tags: ['definitions','zoxiy','ex-create']
book: ['2.2']
depends: []
source: ['ph126 fastlecture 01']
exercises: ['2.5, 2.6']
exNormal: [
  '/ex/create/orValid/from/White(a)|a=b/to/White(b)'
  '/ex/create/orValid/from/a=b|b=c/to/a=c'
  '/ex/create/orValid/from/LeftOf(a,b)|b=c/to/LeftOf(a,c)'
  '/ex/create/orValid/from/SameSize(a,b)/to/a=b'
  '/ex/create/orValid/from/a=b/to/SameSize(a,b)'
  '/ex/create/orValid/from/SameSize(a,b)|SameShape(a,b)/to/a=b'
]
exFast: [
  '/ex/create/orValid/from/LeftOf(a,b)|b=c/to/LeftOf(a,c)'
  '/ex/create/orValid/from/a=b/to/not SameSize(a,b)'
  '/ex/create/orValid/from/not SameShape(a,b)/to/a=b'
  '/ex/create/orValid/from/a=b|b=c/to/a=c'
  '/ex/create/orValid/from/SameSize(a,b)|SameShape(a,b)/to/a=b'
]

---

include ../../../fragments/unit_mixins

+slide({bkg:'unit_06/slide-038.jpeg'})
  .notes Here’s an argument involving identity.  Let’s see if it’s valid.
  //- handout
  .handout Principle: If b=c then whatever is true of b is also true of c.
  .handout Principle: a=a is never false
  .img.handout(data-src='img/arg_identity.png')

+slide({bkg:'unit_06/slide-039.jpeg'})
  .notes Suppose we want to find a  counterexample.  So we need to make make the premises true.  Let’s see if we can make them true without making the conclusion true.

+slide({bkg:'unit_06/slide-040.jpeg'})
  .notes Start with an empty world.  
  
+slide({bkg:'unit_06/slide-041.jpeg'})
  .notes Consider the first premise

+slide({bkg:'unit_06/slide-042.jpeg'})
  .notes We want the first premise to be true so we have to put a to the left of b.

+slide({bkg:'unit_06/slide-043.jpeg'})
  .notes What about the second premise?  So far the truth-value of the second and third premises are undefined because the name ‘c’ does not yet designate any object in this situation.

+slide({bkg:'unit_06/slide-044.jpeg'})
  .notes Want the second premise to be true so we have to label the b object c as well.

+slide({bkg:'unit_06/slide-045.jpeg'})
  .notes This is what b=c requires--that one and the same object have both labels.

+slide({bkg:'unit_06/slide-046.jpeg'})
  .notes Now, what about the conclusion?
  
+slide({bkg:'unit_06/slide-047.jpeg'})
  .notes Having made the premises true, the conclusion turns out to be true as well.  
  .notes This is sort of an informal proof that the argument is valid.  If you think about what is involved in making the premises true, you can see that it guarantees the truth of the conclusion as well.
 
+slide({bkg:'unit_06/slide-048.jpeg'})
  .notes As far as the logic of identity goes, all you need to know are two principles.
  .notes This first principle.

+slide({bkg:'unit_06/slide-049.jpeg'})
  .notes You can see that this principle must be true from the meaning of identity:  b=c requires that one and the same object have both labels.

+slide({bkg:'unit_06/slide-050.jpeg'})
  .notes And this first principle is  exactly what you need to prove the argument we were just looking at.

+slide({bkg:'unit_06/slide-051.jpeg'})
  .notes The second principle says, roughly, that everything is identical to itself.

+slide({bkg:'unit_06/slide-052.jpeg'})
  .notes You can see that this principle must be true from the meaning of identity:  a=a requires only that one and the object named 'a' be named 'a', which you can't really avoid.  (In case you're thinking there's a tricky issue about what happens if nothing is named 'a', well done.  In our system of logic, we rule that possibility out by stipulation to keep things simple.)

+slide({bkg:'unit_06/slide-053.jpeg'})
  .notes These principles are all you need to understand the logical notion of identity.  They allow you to do things like prove that identity is a symmetric and transitive relation.

+slide({bkg:'unit_06/151023-0027.png'})
  .notes: :t
    I want to show you quickly how to work with identity in logic-ex.
+slide({bkg:'unit_06/151023-0028.png'})
  .notes: :t
    Let’s add a person to the possible situation
+slide({bkg:'unit_06/151023-0029.png'})
  .notes: :t
    Here I’ve added some names
+slide({bkg:'unit_06/151023-0029b.png'})
  .notes: :t
    I’ve called one person ‘a’ and the other ‘b’.
+slide({bkg:'unit_06/151023-0029c.png'})
  .notes: :t
    Of course this makes the first sentence false, not true.
    How do I make it true?
+slide({bkg:'unit_06/151023-0030.png'})
  .notes: :t
    Like this ...
+slide({bkg:'unit_06/151023-0030b.png'})
  .notes: :t
    I’ve given one person both names.
    To give more than one name to a person, simply type multiple names
    separated by commas or spaces (or both), just as I’ve done here.
+slide({bkg:'unit_06/151023-0030c.png'})
  .notes: :t
    And this makes the sentence ‘a=b’ true, of course.
+slide({bkg:'unit_06/151023-0030d.png'})
  .notes: :t
    But what about the next sentence, ‘not b=c’?
+slide({bkg:'unit_06/151023-0030e.png'})
  .notes: :t
    To make this true or false, I need to give someone the name c.
    I’m going to add that to the person already known as ‘a’ and ‘b’.
+slide({bkg:'unit_06/151023-0031.png'})
+slide({bkg:'unit_06/151023-0031b.png'})
  .notes: :t
    So here you see one person has all three names
+slide({bkg:'unit_06/151023-0031c.png'})
  .notes: :t
    Of course this means the second sentence, ‘not b=c’ is false.
    We need to make that true.
    How are we going to do that?
+slide({bkg:'unit_06/151023-0032.png'})
  .notes: :t
    Let me re-arrange the names.
+slide({bkg:'unit_06/151023-0032b.png'})
  .notes: :t
    You see that I’ve named the other, yellow person c.
+slide({bkg:'unit_06/151023-0032c.png'})
  .notes: :t
    And this is enough to make the second sentence true.
