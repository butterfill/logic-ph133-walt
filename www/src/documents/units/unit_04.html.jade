---cson
layout: 'deck_units' 
title: "Counterexamples"
description: """
  Explains the notion of a counterexample.
  Discusses a counterexample to a simple argument.
  Demonstrates using zoxiy to construct a counterexample involving
  shape and size properties.
  """
tags: ['definitions','zoxiy', 'ex-create']
depends: ['unit_03']
source: ['ph126 lecture 01']
sequence: 70
book: ['2.5']
exercises_fast: ['2.8, 2.10, 2.12, 2.21']
exercises: ['2.8, 2.10, 2.12, 2.21']
exNormal: [
  '/ex/create/from/TallerThan(a,b)/to/WiderThan(a,b)'
  '/ex/create/from/Adjacent(a,b)|Adjacent(b,c)/to/Adjacent(a,c)'
  '/ex/create/from/SameShape(a,b)/to/SameSize(a,b)'
  '/ex/create/from/SameSize(a,b)/to/SameShape(a,b)'
  """/ex/TorF/from/Happy(a) or Happy(b)|Happy(a)/to/not Happy(b)/world/[{"x":9,"y":0,"w":2,"h":2,"n":"a","c":"white","f":["}:","^","D"]},{"x":0,"y":0,"w":2,"h":2,"n":"b","c":"pink","f":[":\'","-","D"]},{"x":4,"y":0,"w":2,"h":2,"n":"","c":"purple","f":[":\'","-","("]}]/qq/Happy(a) or Happy(b)|Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument"""
  """/ex/TorF/from/Happy(a)/to/not Happy(b)/world/[{"x":3,"y":0,"w":3,"h":3,"n":"a","c":"white","f":[":","-",")"]},{"x":7,"y":0,"w":2,"h":2,"n":"b","c":"red","f":[":'",">","("]}]/qq/Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument"""
  """/ex/TorF/from/LargerThan(a,b)/to/not SameShape(a,b)/world/[{"x":3,"y":0,"w":3,"h":3,"n":"a","c":"white","f":[":","-",")"]},{"x":7,"y":0,"w":2,"h":2,"n":"b","c":"red","f":[":'",">","("]}]/qq/LargerThan(a,b)|not SameShape(a,b)|The possible situation is a counterexample to the argument"""
  '/ex/q/define ‘counterexample’'
  '/ex/create/from/LeftOf(a,b)|RightOf(b,c)/to/LeftOf(a,c)'
  '/ex/create/from/LeftOf(a,b)|Adjacent(b,c)/to/LeftOf(a,c)'
]
exFast: [
  '/ex/create/from/TallerThan(a,b)/to/WiderThan(a,b)'
  '/ex/create/from/Adjacent(a,b)|Adjacent(b,c)/to/Adjacent(a,c)'
  '/ex/create/from/SameShape(a,b)/to/SameSize(a,b)'
  '/ex/create/from/SameSize(a,b)/to/SameShape(a,b)'
  """/ex/TorF/from/Happy(a) or Happy(b)|Happy(a)/to/not Happy(b)/world/[{"x":9,"y":0,"w":2,"h":2,"n":"a","c":"white","f":["}:","^","D"]},{"x":0,"y":0,"w":2,"h":2,"n":"b","c":"pink","f":[":\'","-","D"]},{"x":4,"y":0,"w":2,"h":2,"n":"","c":"purple","f":[":\'","-","("]}]/qq/Happy(a) or Happy(b)|Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument"""
  """/ex/TorF/from/Happy(a)/to/not Happy(b)/world/[{"x":3,"y":0,"w":3,"h":3,"n":"a","c":"white","f":[":","-",")"]},{"x":7,"y":0,"w":2,"h":2,"n":"b","c":"red","f":[":'",">","("]}]/qq/Happy(a)|not Happy(b)|The possible situation is a counterexample to the argument"""
  """/ex/TorF/from/LargerThan(a,b)/to/not SameShape(a,b)/world/[{"x":3,"y":0,"w":3,"h":3,"n":"a","c":"white","f":[":","-",")"]},{"x":7,"y":0,"w":2,"h":2,"n":"b","c":"red","f":[":'",">","("]}]/qq/LargerThan(a,b)|not SameShape(a,b)|The possible situation is a counterexample to the argument"""
  '/ex/q/define ‘counterexample’'
  '/ex/create/from/LeftOf(a,b)|RightOf(b,c)/to/LeftOf(a,c)'
  '/ex/create/from/LeftOf(a,b)|Adjacent(b,c)/to/LeftOf(a,c)'
  '/ex/create/orValid/from/LeftOf(a,b)|LeftOf(b,c)/to/LeftOf(a,c)'
  '/ex/create/orValid/from/SameSize(a,b)|SameShape(b,c)/to/SameSize(a,c)'
  '/ex/create/orValid/from/not LeftOf(a,b)|not LeftOf(b,a)/to/a=b'
]
---

include ../../../fragments/unit_mixins



+slide({bkg:'unit_04/slide-075.jpeg'})
  .notes 
  .handout A \emph{counterexample} to an argument is a possible situation in which its premises are T and its conclusion F.
  .handout There are no counterexamples to a logically valid argument.  
  .handout If an argument is not valid, then there is a counterexample to it. 
  .handout To show that an argument is not logically valid, we specify a counterexample to it.

+slide({bkg:'unit_04/slide-076.jpeg'})
  .notes 

+slide({bkg:'unit_04/slide-077.jpeg'})
  .notes 

+slide({bkg:'unit_04/slide-078.jpeg'})
  .notes 

+slide({bkg:'unit_04/slide-079.jpeg'})
  .notes 

+slide({bkg:'unit_04/slide-080.jpeg'})
  .notes 

+slide({bkg:'unit_04/slide-081.jpeg'})
  .notes 

+slide_middle
  p.center
    a(href="https://ex.zoxiy.xyz/ex/create/from/SameShape(a%2Cb)/to/SameSize(a%2Cb)") https://ex.zoxiy.xyz/ex/create/from/SameShape(a,b)/to/SameSize(a,b)
  .notes: :t
    Let’s see how to create counterexamples in this in logic-ex.

+slide({bkg:'unit_04/151023-0024.png'})
  .notes: :t
    We have to create a counterexample to an argument.
+slide({bkg:'unit_04/151023-0024b.png'})
  .notes: :t
    So the premise must be true ...
+slide({bkg:'unit_04/151023-0024c.png'})
  .notes: :t
    ... and the conclusion must be false.
+slide({bkg:'unit_04/151023-0024d.png'})
  .notes: :t
    I already put the names in; without having things named ‘a’ and ‘b’
    the sentences would not be true or false in our possible situation.
+slide({bkg:'unit_04/151023-0024e.png'})
  .notes: :t
    We need to make the conclusion false.
    At the moment it’s true because a and b are the same size.
    So let’s change the size of a.
    Do this by dragging the corner to stretch her.
+slide({bkg:'unit_04/151023-0025.png'})
  .notes: :t
    Now a is wider.
+slide({bkg:'unit_04/151023-0025b.png'})
  .notes: :t
    This makes the conclusion false, as we wanted.
+slide({bkg:'unit_04/151023-0025c.png'})
  .notes: :t
    But now the premise is false too.
    (This is often the problem with creating counterexamples.)
    What can we do?
+slide({bkg:'unit_04/151023-0025d.png'})
  .notes: :t
    Let’s make a taller as well by stretching her down.
    Do this by dragging the corner.
+slide({bkg:'unit_04/151023-0026.png'})
  .notes: :t
    Now a is both wider and taller than b.
+slide({bkg:'unit_04/151023-0026b.png'})
  .notes: :t
    So the conclusion is still false ...
+slide({bkg:'unit_04/151023-0026c.png'})
  .notes: :t
    ... but now the premise is true, just as we wanted.

+slide_middle
  p: :t
    A counterexample to an argument is a possible situation in which 
    its premises are true and its conclusion is false.
  