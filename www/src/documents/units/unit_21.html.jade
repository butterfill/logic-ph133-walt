---cson
layout: 'deck_units' 
title: "Formal Proof: ∧Elim and ∧Intro"
description: """
  Introduces and illustrates the use of rules of proof for conjunction.
  Explains how to create proofs using logic-ex.
  """
tags: ['proof','zoxiy','ex-proof']
depends: ['unit_211']
source: ['ph133 lecture 03']
sequence: 200
book: ['5.1','6.1']
exercises: ['6.1']
exercises_fast: ['5.3--5.6']
exNormal: [
  '/ex/proof/from/A and B/to/A'
  '/ex/proof/from/A|B/to/A and B'
  '/ex/proof/from/Happy(a) and Sad(b)|Sad(b) and Confused(c)/to/Happy(a) and Confused(c)'
]
exFast: [
  '/ex/proof/from/Happy(a) and Sad(b)|Sad(b) and Confused(c)/to/Happy(a) and Confused(c)'
]
---

include ../../../fragments/unit_mixins

+slide({bkg:'unit_21/slide-006.jpeg'})
  .notes 
  //- handout
  .img.handout(data-src='img/rule_conjunction_intro.png')
  .img.handout(data-src='img/rule_conjunction_elim.png')
  .img.handout(data-src='img/proof_unit_21.png')

+slide({bkg:'unit_21/slide-007.jpeg'})
  .notes See how we have P in a premise and P in the conclusion?

+slide({bkg:'unit_21/slide-008.jpeg'})
  .notes We have to get the P out of the conjunction and back into the conclusion.

+slide({bkg:'unit_21/slide-009.jpeg'})
  .notes How can we get P out of this premise?

+slide({bkg:'unit_21/slide-010.jpeg'})
  .notes First we have to ask, What's the connective?

+slide({bkg:'unit_21/slide-011.jpeg'})
  .notes The connective is conjunction.  This tells us we want to use a conjunction-rule.  But is it the introduction or elimination rule that we need?

+slide({bkg:'unit_21/slide-012.jpeg'})
  .notes It's elimination.  Nearly always we need elimination when we're acting on premises.

+slide({bkg:'unit_21/slide-013.jpeg'})
  .notes See how the rule matches our premise.

+slide({bkg:'unit_21/slide-014.jpeg'})
  .notes Because we have a match, we can use this rule to add a line to our proof.

+slide({bkg:'unit_21/slide-015.jpeg'})
  .notes The rule allows us to add 'P' or 'Q' to the proof, but I've chosen to add 'P'.
  .notes Now having used the rule we have to explain exactly what we've done.  This requires two things ...
  
+slide({bkg:'unit_21/slide-016.jpeg'})
  .notes We must cite the rule used.

+slide({bkg:'unit_21/slide-017.jpeg'})
  .notes And we must cite the lines we applied the rule to.

+slide({bkg:'unit_21/slide-018.jpeg'})
  .notes So far so good.  Can you see what we should do next?

+slide({bkg:'unit_21/slide-019.jpeg'})
  .notes Getting the R out of the second premise can be done in exactly the same way.
  .notes Now, how are we going to get to the conclusion?
  .notes In general, we use introduction rules to get to the conclusion.  And since this conclusion is a conjunction, we'll use conjunction-intro to get to it.

+slide({bkg:'unit_21/slide-020.jpeg'})
  .notes Look at the rule for conjunction intro. 

+slide({bkg:'unit_21/slide-021.jpeg'})
  .notes See how our proof fits the pattern of the rule.

+slide({bkg:'unit_21/slide-022.jpeg'})
  .notes So it turns out we already did what we need for conjunction intro.  
  .notes All that's left is to explain what we've done.  As before this requres two things.

+slide({bkg:'unit_21/slide-023.jpeg'})
  .notes We must cite the rule used.

+slide({bkg:'unit_21/slide-024.jpeg'})
  .notes And we must cite the lines we applied the rule to.

+slide({bkg:'unit_21/slide-025.jpeg'})
  .notes Note the pattern of rules that we have for conjunction: introduction and elimination.
  .notes For each connective we'll have such a pair of rules, one introduction rule and one elimination rule.
  
+slide({bkg:'unit_21/slide-026.jpeg'})
  .notes With the elimination rule, we have the connective at the start and we eliminate it in applying the rule.

+slide({bkg:'unit_21/slide-027.jpeg'})
  .notes See how this worked in our proof.

+slide({bkg:'unit_21/slide-028.jpeg'})
  .notes With the introduction rule, we don't have the connective at the start and we introduce it by appling the rule. 

+slide({bkg:'unit_21/slide-029.jpeg'})
  .notes Here's how we did it in the proof.
  .notes: :t()
    If you've been following all this, you know everything you need to know to use conjunction intro and conjunction elim in proofs.
    You also know how to do Fitch proofs.  The rest is just a matter of learning more rules.
  .notes: :t()
    Now it's possible you haven't entirely been following all this ...
//- removed for walt:
//- +slide({bkg:'unit_21/spoon_feeding_DSC_7914.jpeg'})
//-   .notes: :t()
//-     ... When I was learning logic, I often didn't immediately understand the lectures and needed
//-     to go back over my notes after each lecture.
//-     Hopefully you will do the same because I don't really have the patience for spoon feeding.


//- now see how to do it in zoxiy
+slide_middle
  .handout \textbf{Writing a proof in zoxiy}
  .img.handout(data-src='img/151024-0010-crop.png')
  p.center
    a(href="https://ex.zoxiy.xyz/ex/proof/from/A%20and%20B%7CB%20and%20C/to/A%20and%20C") https://ex.zoxiy.xyz/ex/proof/from/A and B|B and C/to/A and C

+slide({bkg:'unit_21/151024-0001.png'})
  .notes: :t
    When you start an exercise, you’re already given the basic form of 
    the proof, with a couple of blank lines.
  .notes: :t
    The box you’re working in is just a text editor.
    You can add lines by pressing ‘return’ and delete lines 
    just like you would in any text editor.
  .notes: :t
    To repeat: the proof is just some text that you edit in the normal way.
+slide({bkg:'unit_21/151024-0001b.png'})
  .notes: :t
    We just need to a step here.
    
+slide({bkg:'unit_21/151024-0002.png'})
  .notes: :t
    I’ve gone ahead and typed A because we need to derive A from the premises.
+slide({bkg:'unit_21/151024-0002b.png'})
  .notes: :t
    Here’s the A I typed.
+slide({bkg:'unit_21/151024-0002c.png'})
  .notes: :t
    This red dot suggests that there is a problem with the line.
+slide({bkg:'unit_21/151024-0002d.png'})
  .notes: :t
    The text under or proof is giving us a clue: we didn’t justify the step yet.
    Let’s do that now.
+slide({bkg:'unit_21/151024-0003.png'})
  .notes: :t
    Here I’ve added justification.
+slide({bkg:'unit_21/151024-0003b.png'})
  .notes: :t
    It’s over here on the right (I just added spaces to move it away from the sentence ‘A’).
  .notes: :t
    I want to mention a couple of conventions.
+slide({bkg:'unit_21/151024-0003c.png'})
  .notes: :t
    First, justification needs to start with ‘//’.  This is to separate justification 
    from the sentence itself.
  .notes: :t
    If you forget the ‘//’, zoxiy won’t be able to understand your proof and won’t 
    be able to explain to you what went wrong.
+slide({bkg:'unit_21/151024-0003d.png'})
  .notes: :t
    The next thing to note is that I typed the word ‘and’ rather than the symbol
    for conjunction (‘∧’).  As a convenience, zoxiy will let us use words 
    rather than making us type symbols.  But we can type the symbols if we prefer.
  .notes: :t
    The same is true when we’re writing sentences: you can type ‘A and B’ instead of
    ‘A ∧ B’ if you like.
  .notes: :t
    This is a handy feature of awFOL vs the language of the textbook we’re using.
    awFOL let’s you use words where really there should be a symbol, just to make 
    it easy to type things.
+slide({bkg:'unit_21/151024-0003e.png'})
  .notes: :t
    Finally, note that we put a number at the end.  This is the number 1,
    which refers to the first line.
  .notes: :t
    zoxiy provides line numbers for us (you can add your own
    if you prefer, but then you have to be really consistent about 
    starting each line with a number).
+slide({bkg:'unit_21/151024-0003f.png'})
  .notes: :t
    Wait a minute.  We still have that red dot and the error message
    telling us our line is not justified.  But we have added the justification.
    What’s going on?
  .notes: :t
    zoxiy might be a bit slow to update.  In this situation, just move your
    cursor up and down to get zoxiy to check your line again.
    Let me do that now ...
+slide({bkg:'unit_21/151024-0004.png'})
  .notes: :t
    ... and the dot has turned green, indicating that this line is ok.
+slide({bkg:'unit_21/151024-0004b.png'})
  .notes: :t
    What’s next?
+slide({bkg:'unit_21/151024-0004c.png'})
  .notes: :t
    We need to add another step to the proof.
  .notes: :t
    (It just happens that we have the right amount of space for this proof,
    but generally you are going to have to add lines to your proof.  Do this
    with the return key, as mentioned above.)
+slide({bkg:'unit_21/151024-0005.png'})
  .notes: :t
    Here I’ve added the setntence we need (‘C’).
+slide({bkg:'unit_21/151024-0006.png'})
  .notes: :t
    And here’s the justification as well.
+slide({bkg:'unit_21/151024-0006-1.png'})
  .notes: :t
    But wait, the red dot is back.
    That means there’s something wrong with the line.
    What has gone wrong?
+slide({bkg:'unit_21/151024-0006-3.png'})
  .notes: :t
    The status message is really unhelpful in this case, as it often will be.
    (Maybe it will be improved at some point.)
    Sorry about that.
    
+slide({bkg:'unit_21/151024-0006-4.png'})
  .notes: :t
    What could have gone wrong? Note that we’re citing line 1.
+slide({bkg:'unit_21/151024-0006-5.png'})
  .notes: :t
    So let’s have a look at line 1.

+slide({bkg:'unit_21/151024-0006-6.png'})
  .notes: :t
    This line contains ‘A and B’.
+slide({bkg:'unit_21/151024-0006-7.png'})
  .notes: :t
    But actually we’re trying to derive C.
    And you can’t derive C from A and B.
+slide({bkg:'unit_21/151024-0006-8.png'})
  .notes: :t
    The C we want to derive is actually here, in line 2.
+slide({bkg:'unit_21/151024-0006-9.png'})
  .notes: :t
    So we have to edit the line number.
    (This kind of mistake tends to happen to me quite a bit because
    I like to copy and paste justification to save typing)
+slide({bkg:'unit_21/151024-0007.png'})
  .notes: :t
    Here I’ve fixed the line number.
+slide({bkg:'unit_21/151024-0007-1.png'})
  .notes: :t
    What’s next?
+slide({bkg:'unit_21/151024-0007-2.png'})
  .notes: :t
    There’s a big whole where the justification for the last line should be.
    (Remember that every line of the proof is either a premise or needs justification.)
+slide({bkg:'unit_21/151024-0008.png'})
  .notes: :t
    So I’ve gone ahead and added the justification.
+slide({bkg:'unit_21/151024-0008-1.png'})
  .notes: :t
    But it hasn’t worked: we’ve got the red dot again.
    Unless you’re really good at logic, you’re going to be seeing a lot of the red dot
    for a few weeks.

+slide({bkg:'unit_21/151024-0008-2.png'})
  .notes: :t
    Here’s the mistake: we’re still citing and elim.
    But at this point we’re supposed to be *introducing* a conjunction
    rather than eliminating one.
+slide({bkg:'unit_21/151024-0010.png'})
  .notes: :t
    We can fix this just by deleting ‘elim’ and replacing it with ‘intro’
+slide({bkg:'unit_21/151024-0010-1.png'})
  .notes: :t
    And here’s the finished proof.
    This is correct; if you submit it, zoxiy should say your proof is correct.
